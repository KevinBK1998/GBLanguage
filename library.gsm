PUSH DE
PUSH BC
PUSH AF
LD B, 0x0
CP B
JR NZ, WRITE_CHECK

CALL READ_FUN
JR LIB_END

WRITE_CHECK:
POP AF
PUSH AF
INC B
CP B
JR NZ, LOAD_ASCII_CHECK

// WRITE
CALL GET_INACTIVE_BG_MAP_FUN
LD E, 0x4

BACKUP_BG_MAP_LOOP:
LD D, 0x0
CALL COPY_BC_TO_HL_LOOP
DEC E
JR NZ, BACKUP_BG_MAP_LOOP

POP AF
POP BC
PUSH BC
PUSH AF
LD D, B
CALL GET_INACTIVE_BG_MAP_FUN
// store in next line
LD A, [HN], 0x9A
SWAP A
AND 0xF0
RL A
ADD A, L
LD L, A
//LD A, 0x4F
//LDI [HL], A
//LD A, 0x3A
//LDI [HL], A
LD A, D
CALL CONVERT_TO_BCD_FUN
LD A, B
// Tens place first
SWAP A
CALL STORE_DIGIT_FUN
LD A, B
CALL STORE_DIGIT_FUN
CALL WAIT_VBLANK
CALL SWITCH_BG_MAP_FUN
CALL WAIT_DRAW
JR LIB_END

LOAD_ASCII_CHECK:
POP AF
PUSH AF
INC B
CP B
JR NZ, LIB_END

// LOAD ASCII
CALL WAIT_VBLANK
// turn off display
LD A, 0x19
LD [HN], A, 0x40
// setup palette
LD A, 0xE4
LD [HN], A, 0x47
LD [HN], A, 0x48
LD [HN], A, 0x49
//copy ascii tiles
LD HL, 0x8200
LD BC, ASCII_TABLE
LD E, 0x6

LOAD_TILESET_LOOP:
LD D, 0x0
CALL COPY_BC_TO_HL_LOOP
DEC E
JR NZ, LOAD_TILESET_LOOP

//copy background map - title in this case
LD HL, 0x9C00
LD BC, 0x134
LD D, 0xB
CALL COPY_BC_TO_HL_LOOP
CALL LOAD_BLINKING_CURSOR
CALL INC_LINE_FUN
// turn on display
LD A, 0x99
LD [HN], A, 0x40
CALL WAIT_DRAW

LIB_END:
POP BC
POP BC
POP DE
RET

WAIT_SCANLINE_LOOP:
LD A, [HN], 0x44
CP B
JR NZ, WAIT_SCANLINE_LOOP
RET

WAIT_VBLANK:
LD B, 0x90
CALL WAIT_SCANLINE_LOOP
RET

WAIT_DRAW:
LD B, 0x0
CALL WAIT_SCANLINE_LOOP
CALL WAIT_VBLANK
RET

COPY_BC_TO_HL_LOOP:
LD A, [BC]
LDI [HL], A
INC BC
DEC D
JR NZ, COPY_BC_TO_HL_LOOP
RET

GET_INACTIVE_BG_MAP_FUN:
LD A, [HN], 0x40
BIT 3, A
JR Z, BG_MAP_1
LD HL, 0x9800
LD BC, 0x9C00
RET

BG_MAP_1:
LD HL, 0x9C00
LD BC, 0x9800
RET

CONVERT_TO_BCD_FUN:
PUSH AF
AND 0xF0
LD B, A
POP AF
PUSH AF
AND 0xF
OR A
DAA
LD C, 0x16
LD D, A
SUB A, A
ADD A, B
JR Z, SKIP_A0

LD A, D

A_0:
ADD A, C
DAA
DEC B
JR NZ, A_0

LD D, A

SKIP_A0:
LD A, D
LD B, A
POP AF
RET

STORE_DIGIT_FUN:
AND 0xF
ADD A, 0x30
LDI [HL], A
RET

SWITCH_BG_MAP_FUN:
LD A, [HN], 0x40
BIT 3, A
JR Z, SET_BIT_3

RES 3, A
JR STORE_LCDC_BG

SET_BIT_3:SET 3, A
STORE_LCDC_BG:LD [HN], A, 0x40
RET

WAIT_SECOND:
LD A, 0x2A
WAIT_IN_LOOP:
PUSH AF
CALL WAIT_DRAW
POP AF
DEC A
JR NZ, WAIT_IN_LOOP
RET

INC_LINE_FUN:
BRKP:
LD A, [HN], 0x9A
INC A
LD [HN], A, 0x9A
LD HL, 0xFE00
// Next line is 0xN0 + 0x10
SWAP A
RR A
ADD A, 0x10
LD [HL], A
RET

LOAD_BLINKING_CURSOR:
LD HL, 0xFE00
LD A, 0x10
LDI [HL], A
LD A, 0x8
LDI [HL], A
LD A, 0x5F
LDI [HL], A
SUB A, A
LDI [HL], A
CALL TURN_OFF_SPRITES
RET

INC_COL_FUN:
LD HL, 0xFE01
// Leave 2 spaces 0x10 + 8
LD A, 0x18
LD [HL], A
RET

TURN_OFF_SPRITES:
LD A, [HN], 0x40
RES 1, A
LD [HN], A, 0x40
RET

BLINK_CURSOR:
LD A, [HN], 0x40
BIT 1, A
JR Z, SET_BIT_1

RES 1, A
JR STORE_LCDC_SP

SET_BIT_1:SET 1, A
STORE_LCDC_SP:LD [HN], A, 0x40
RET

READ_FUN:
// C stores the input
LD C, 0x0
// set cursor at (0, line)
LD A, 0x8
LD HL, 0xFE01
LD [HL], A

READ_BUTTON_PRESS_LOOP:
CALL BLINK_CURSOR
CALL WAIT_SECOND
// read button press
LD A, 0x20
LD [HN], A, 0x0
LD A, [HN], 0x0
CPL
AND 0xF
SWAP A
LD B, A
// read dpad press
LD A, 0x10
LD [HN], A, 0x0
LD A, [HN], 0x0
CPL
AND 0xF
OR B
// B stores button press
LD B, A
BIT 0, A
JR Z, CHECK_B

// handle A pressed
PUSH AF
LD A, 0x1
ADD A, C
LD C, A
CALL INC_COL_FUN
LD A, C
LD B, A
LD A, 0x1
CALL LIBRARY
POP AF
JR CHECK_ST

CHECK_B:
BIT 1, A
JR Z, CHECK_SE

// handle B pressed
PUSH AF
LD A, C
LD B, 0x1
SUB A, B
LD C, A
CALL INC_COL_FUN
LD A, C
LD B, A
LD A, 0x1
CALL LIBRARY
POP AF

CHECK_SE:
BIT 2, A
JR Z, CHECK_ST

// handle SELECT pressed
PUSH AF
LD A, C
RL A
LD C, A
CALL INC_COL_FUN
LD A, C
LD B, A
LD A, 0x1
CALL LIBRARY
POP AF

CHECK_ST:
BIT 3, A
JR Z, READ_BUTTON_PRESS_LOOP

// handle START pressed
LD A, C
LD B, A
LD A, 0x1
CALL LIBRARY
CALL INC_LINE_FUN
CALL TURN_OFF_SPRITES
LD A, C
RET

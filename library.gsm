PUSH DE
PUSH BC
PUSH AF
LD B, 0x0
CP B
JR NZ, WRITE_CHECK

// READ
LD D, 0x0
READ_BUTTON_PRESS_LOOP:
CALL WAIT_SECOND
// read button press
LD A, 0x20
LD [HN], A, 0x0
LD A, [HN], 0x0
LD A, [HN], 0x0
CPL
AND 0xF
SWAP A
LD B, A
// read dpad press
LD A, 0x10
LD [HN], A, 0x0
LD A, [HN], 0x0
LD A, [HN], 0x0
LD A, [HN], 0x0
LD A, [HN], 0x0
LD A, [HN], 0x0
LD A, [HN], 0x0
CPL
AND 0xF
OR B
LD B, A
BIT 0, A
JR Z, CHECK_B

// handle A pressed
PUSH AF
LD A, 0x1
ADD A, D
DAA
LD D, A
LD B, A
LD A, 0x1
CALL LIBRARY
POP AF
JR CHECK_ST

CHECK_B:
BIT 1, A
JR Z, CHECK_ST

// handle B pressed
PUSH AF
LD A, 0xFF
ADD A, D
DAA
LD D, A
LD B, A
LD A, 0x1
CALL LIBRARY
POP AF

CHECK_ST:
BIT 3, A
JR Z, READ_BUTTON_PRESS_LOOP
LD A, D
LD B, A
LD A, 0x1
CALL LIBRARY
CALL INC_LINE_FUN
LD A, D
JR LIB_END

WRITE_CHECK:
POP AF
PUSH AF
INC B
CP B
JR NZ, LOAD_ASCII_CHECK

// WRITE
CALL GET_INACTIVE_BG_MAP_FUN
LD E, 0x4

BACKUP_BG_MAP_LOOP:
LD D, 0x0
CALL COPY_BC_TO_HL_LOOP
DEC E
JR NZ, BACKUP_BG_MAP_LOOP

POP AF
POP BC
PUSH BC
PUSH AF
LD D, B
CALL GET_INACTIVE_BG_MAP_FUN
// store in next line
LD A, [HN], 0x9A
LD E, 0x5
A_2:
RL A
DEC E
JR NZ, A_2
ADD A, L
LD L, A
//LD A, 0x4F
//LDI [HL], A
//LD A, 0x3A
//LDI [HL], A
LD A, D
CALL CONVERT_TO_BCD_FUN
LD A, B
// Tens place first
SWAP A
CALL STORE_DIGIT_FUN
LD A, B
CALL STORE_DIGIT_FUN
CALL WAIT_VBLANK
CALL SWITCH_BG_MAP_FUN
CALL WAIT_DRAW
JR LIB_END

LOAD_ASCII_CHECK:
POP AF
PUSH AF
INC B
CP B
JR NZ, LIB_END

// LOAD ASCII
CALL WAIT_VBLANK
// turn off display
LD A, 0x19
LD [HN], A, 0x40
// setup palette
LD A, 0xE4
LD [HN], A, 0x47
LD [HN], A, 0x48
LD [HN], A, 0x49
//copy ascii tiles
LD HL, 0x8200
LD BC, ASCII_TABLE
LD E, 0x6

LOAD_TILESET_LOOP:
LD D, 0x0
CALL COPY_BC_TO_HL_LOOP
DEC E
JR NZ, LOAD_TILESET_LOOP

//copy background map - title in this case
LD HL, 0x9C00
LD BC, 0x134
LD D, 0xB
CALL COPY_BC_TO_HL_LOOP
CALL INC_LINE_FUN
// turn on display
LD A, 0x99
LD [HN], A, 0x40
CALL WAIT_DRAW

LIB_END:
POP BC
POP BC
POP DE
RET

WAIT_SCANLINE_LOOP:
LD A, [HN], 0x44
CP B
JR NZ, WAIT_SCANLINE_LOOP
RET

WAIT_VBLANK:
LD B, 0x90
CALL WAIT_SCANLINE_LOOP
RET

WAIT_DRAW:
LD B, 0x0
CALL WAIT_SCANLINE_LOOP
CALL WAIT_VBLANK
RET

COPY_BC_TO_HL_LOOP:
LD A, [BC]
LDI [HL], A
INC BC
DEC D
JR NZ, COPY_BC_TO_HL_LOOP
RET

GET_INACTIVE_BG_MAP_FUN:
LD A, [HN], 0x40
BIT 3, A
JR Z, BG_MAP_1
LD HL, 0x9800
LD BC, 0x9C00
RET

BG_MAP_1:
LD HL, 0x9C00
LD BC, 0x9800
RET

CONVERT_TO_BCD_FUN:
PUSH AF
LD B, 0x10
LD C, 0xFF

A_0:
INC C
SUB A, B
JR NC, A_0

POP AF
PUSH AF
LD D, 0x6
LD B, A
LD A, 0x0

A_1:
ADD A, D
DEC C
JR NZ, A_1

ADD A, B
DAA
DAA
LD B, A
POP AF
RET

STORE_DIGIT_FUN:
AND 0xF
ADD A, 0x30
LDI [HL], A
RET

SWITCH_BG_MAP_FUN:
LD A, [HN], 0x40
BIT 3, A
JR Z, SET_BIT_3

RES 3, A
JR STORE_LCDC

SET_BIT_3:SET 3, A
STORE_LCDC:LD [HN], A, 0x40
RET

WAIT_SECOND:
LD A, 0x40
WAIT_IN_LOOP:
PUSH AF
CALL WAIT_DRAW
POP AF
DEC A
JR NZ, WAIT_IN_LOOP
RET

INC_LINE_FUN:
LD A, [HN], 0x9A
INC A
LD [HN], A, 0x9A
RET